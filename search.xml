<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MATLAB双相（相位不敏感）锁相放大器</title>
      <link href="2020/09/16/MATLAB%E9%94%81%E7%9B%B8%E6%94%BE%E5%A4%A7%E5%99%A8/"/>
      <url>2020/09/16/MATLAB%E9%94%81%E7%9B%B8%E6%94%BE%E5%A4%A7%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>锁相放大器(Locked-in Amplifier, LIA)的作用是从输入信号中提取出某个指定频率的信号。</p><h2 id="单相LIA"><a href="#单相LIA" class="headerlink" title="单相LIA"></a>单相LIA</h2><p>锁相放大器主要由锁相环(Phase Locked Loop, PLL)、混频器(Mixer)、低通滤波器(Low Pass Filter, LPF)三部分组成</p><a id="more"></a><p><img src="https://i.loli.net/2020/09/17/xepWabQ13l8ngoL.png" alt="LIA_single"></p><center>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">锁相放大器原理图</div></center><p>锁相环生成参考信号(Reference Signal)，与输入信号相乘得：</p><script type="math/tex; mode=display">Asin(\omega_st)*sin(\omega_rt)=\frac{A}{2}[cos((\omega_s-\omega_r)t+\theta)+cos((\omega_s+\omega_r)t+\theta)]</script><p>当参考信号频率$\omega_r$与输入信号频率$\omega_s$相等时上式为：</p><script type="math/tex; mode=display">\frac{A}{2}[cos\theta+cos(2\omega_st+\theta)]</script><p>通过低通滤波器后滤除$2\omega_s$分量，得到直流分量$\frac{A}{2}cos\theta$，此时输出受到输入信号和参考信号之间的相位差$\theta$影响，是相位敏感的。</p><h2 id="双相LIA"><a href="#双相LIA" class="headerlink" title="双相LIA"></a>双相LIA</h2><p>大多数情况下我们希望输出不受相位影响，这可以通过让锁相环生成两个存在相位差的参考信号（方便起见，一般使两个参考信号的相位差为$\frac{\pi}{2}$，即一个正弦，一个余弦）来实现，双相位（相位不敏感）锁相放大器原理图如下所示</p><p><img src="https://i.loli.net/2020/09/17/PyVNrXf96oHvZMF.png" alt="LIA_double"></p><center>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">相位不敏感锁相放大器</div></center><p>两个输出一般称为X轴输出和Y轴输出，两者合成可以得到相位不敏感的输出。</p><h1 id="MATLAB实现"><a href="#MATLAB实现" class="headerlink" title="MATLAB实现"></a>MATLAB实现</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 双相位（相位不敏感）锁相放大器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sla</span>=<span class="title">lock_in_amp</span><span class="params">(s,fs,fr)</span>   %输入参数为待处理信号、采样频率、参考信号频率</span></span><br><span class="line"><span class="comment">% s=I;fs=fs;fr=fm;</span></span><br><span class="line">N=<span class="built_in">length</span>(s);    <span class="comment">%得到采样点数</span></span><br><span class="line">t=(<span class="number">0</span>:N<span class="number">-1</span>)/fs;   <span class="comment">%根据采样频率与采样点数构造时间序列</span></span><br><span class="line"></span><br><span class="line">x=<span class="number">2</span>*s.*<span class="built_in">cos</span>(<span class="number">2</span>*<span class="built_in">pi</span>*fr*t);  <span class="comment">%X轴信号</span></span><br><span class="line">y=<span class="number">2</span>*s.*<span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*fr*t);  <span class="comment">%Y轴信号</span></span><br><span class="line"></span><br><span class="line">f_low=<span class="number">0</span>;</span><br><span class="line">f_high=<span class="number">5</span>;  <span class="comment">%进行低频滤波，设置滤波宽度为10Hz</span></span><br><span class="line">k_low=<span class="built_in">max</span>(<span class="built_in">floor</span>(f_low/fs*N+<span class="number">1</span>),<span class="number">1</span>);</span><br><span class="line">k_high=<span class="built_in">min</span>(<span class="built_in">floor</span>(f_high/fs*N+<span class="number">1</span>),N/<span class="number">2</span>+<span class="number">1</span>);   <span class="comment">%找到频率区间对应的点区间</span></span><br><span class="line"></span><br><span class="line">fbx=fft(x);    <span class="comment">%x轴滤波</span></span><br><span class="line">fax=<span class="built_in">zeros</span>(<span class="number">1</span>,N);</span><br><span class="line">fax(k_low:k_high)=fbx(k_low:k_high);</span><br><span class="line">fax(N+<span class="number">1</span>-k_high:N+<span class="number">1</span>-k_low)=fbx(N+<span class="number">1</span>-k_high:N+<span class="number">1</span>-k_low);</span><br><span class="line">sx=<span class="built_in">real</span>(ifft(fax));</span><br><span class="line"><span class="comment">% subplot(311)</span></span><br><span class="line"><span class="comment">% plot(t,sx)</span></span><br><span class="line"></span><br><span class="line">fby=fft(y);    <span class="comment">%y轴滤波</span></span><br><span class="line">fay=<span class="built_in">zeros</span>(<span class="number">1</span>,N);</span><br><span class="line">fay(k_low:k_high)=fby(k_low:k_high);</span><br><span class="line">fay(N+<span class="number">1</span>-k_high:N+<span class="number">1</span>-k_low)=fby(N+<span class="number">1</span>-k_high:N+<span class="number">1</span>-k_low);</span><br><span class="line">sy=<span class="built_in">real</span>(ifft(fay));</span><br><span class="line"><span class="comment">% subplot(312)</span></span><br><span class="line"><span class="comment">% plot(t,sy)</span></span><br><span class="line"></span><br><span class="line">sla=(sx.^<span class="number">2</span>+sy.^<span class="number">2</span>).^<span class="number">0.5</span>; <span class="comment">%合成两轴信号</span></span><br><span class="line"><span class="comment">% subplot(313)</span></span><br><span class="line"><span class="comment">% plot(t,sla)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1 id="挖个坑，有机会的话填上"><a href="#挖个坑，有机会的话填上" class="headerlink" title="挖个坑，有机会的话填上"></a>挖个坑，有机会的话填上</h1><p><em>锁相环、混频器</em></p>]]></content>
      
      
      <categories>
          
          <category> 信号处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁相放大 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB快速傅里叶变换(FFT)</title>
      <link href="2020/09/14/MATLAB%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2FFT/"/>
      <url>2020/09/14/MATLAB%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2FFT/</url>
      
        <content type="html"><![CDATA[<p><em>在频域分析中，快速傅里叶变换(Fast Fourier Transform, FFT)是一种计算离散傅里叶变换(Discrete Fourier Transform, DFT)的快速算法，因此从离散傅里叶变换说起。</em></p><a id="more"></a><h1 id="离散傅里叶变换"><a href="#离散傅里叶变换" class="headerlink" title="离散傅里叶变换"></a>离散傅里叶变换</h1><p>在MATLAB中模拟生成一个长度为500的含有白噪声的数字信号$x$，对其做FFT得到相同长度的数组$y$</p><script type="math/tex; mode=display">x=1+2*randn(1,500)+2*sin(2*\pi*200*t)+2*cos(2*\pi*500*t)+cos(2*\pi*600*t)</script><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">fs=<span class="number">1000</span>; N=<span class="number">500</span>;</span><br><span class="line">t=(<span class="number">0</span>:N<span class="number">-1</span>)/fs;   <span class="comment">%生成时间序列</span></span><br><span class="line"></span><br><span class="line">x=<span class="number">1</span>+<span class="number">2</span>*<span class="built_in">randn</span>(<span class="number">1</span>,<span class="number">1000</span>)+<span class="number">2</span>*<span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*<span class="number">200</span>*t)+<span class="number">2</span>*<span class="built_in">cos</span>(<span class="number">2</span>*<span class="built_in">pi</span>*<span class="number">500</span>*t)+<span class="built_in">cos</span>(<span class="number">2</span>*<span class="built_in">pi</span>*<span class="number">600</span>*t);</span><br><span class="line">y=fft(x);</span><br><span class="line"><span class="built_in">plot</span>(y)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/09/20/7dcsyJErZ6tlzLS.jpg" alt="untitled"></p><p>直接把$y$画出来得不到任何信息，因为做DFT得到的$X[k]$是复数，复数的模代表某一频率分量的幅度，复数的角度代表某一频率分量的相位，因此将$y$取模，再画出来</p><p><img src="https://i.loli.net/2020/09/20/FV9NRvyKmEcGt7C.jpg" alt="untitled01"></p><p>此时可以看到六个明显的频率分量，但其横坐标单位显然不是频率（纵坐标是点数，此处为500点FFT），纵坐标也不是频率分量的幅度，下面分析如何从这个横纵坐标还原频率与幅度信息。</p><p>N点序列$x[n]$的DFT公式</p><script type="math/tex; mode=display">X[k]=\sum_{n=0}^{N-1}x[n]e^{-j2{\pi}kn/N},    0{\leqslant}k{\leqslant}N-1</script><p>离散傅里叶逆变换(IDFT)为</p><script type="math/tex; mode=display">x[n]=\frac{1}{N}\sum_{k=0}^{N-1}X[k]e^{j2{\pi}kn/N},    0{\leqslant}n{\leqslant}N-1</script><h2 id="还原实际频率（横坐标）"><a href="#还原实际频率（横坐标）" class="headerlink" title="还原实际频率（横坐标）"></a>还原实际频率（横坐标）</h2><p>由逆变换IDFT公式知，$X[k]$的模实际是频率分量$k\omega_0$的相对幅度，N个谐波的叠加得到的$x[n]$为时间$t=n/{fs}$时的信号大小（$fs$为系统采样率）。</p><p>对比DFT公式，可知一次谐波基频为$\omega_0=2\pi/N$，又有$n=t*fs$，因此上面两式可以表示为如下形式</p><script type="math/tex; mode=display">X[k]=\sum_{n=0}^{N-1}x[n]e^{-jk\omega_0*fs*t},    t=\frac{n}{fs}</script><script type="math/tex; mode=display">x[n]=\frac{1}{N}\sum_{k=0}^{N-1}X[k]e^{jk\omega_0*fs*t},    t=\frac{n}{fs}</script><p>所以$X[k]$，即横坐标第$k$个点对应的实际角频率为$k\omega_0*fs=k\frac{2\pi}{N}fs$，频率则为角频率除以$2\pi$得$f_k=k\frac{fs}{N}。$</p><p>由于MATLAB中数组下标从1开始，因此<strong>在MATLAB中$y（k）$对应的实际频率为$(k-1)\frac{fs}{N}$，频谱分辨率为$\frac{fs}{N}$。</strong></p><h2 id="还原实际幅度（纵坐标）"><a href="#还原实际幅度（纵坐标）" class="headerlink" title="还原实际幅度（纵坐标）"></a>还原实际幅度（纵坐标）</h2><p>对N点<strong>实数</strong>序列$x[n]$做DFT得到的N个值有这个规律：第$k$个值与第$(N+2-k)$个值互为共轭，其中k的取值范围为$2{\leq}k{\leq}ceil(N/2)$。比如对实数序列[0 1 2 3 4 5 6 7]做DFT，结果如下图所示：</p><p><img src="https://i.loli.net/2020/09/21/Kp9tmDJPu21haM6.png" alt="image-20200921141051265"></p><p>这是由DFT的性质决定的，只要是对实数信号做DFT，那么必然有这个结果。只有两个点没有互为共轭的数：第1个点和第N/2+1（N为偶数的时候）个点，这两个点分别对应直流（频率为0）分量和频率为fs/2的分量，但由于Nyquist定理我们只考虑$[0,fs/2]$区间的频率。因此可以理解为除了0和fs/2这两个频率处的信号，其他频率的强度都有一半被分到$[fs/2,fs]$上了。注意IDFT公式前面还有一个$\frac{1}{N}$的系数</p><script type="math/tex; mode=display">x[n]=\frac{1}{N}\sum_{k=0}^{N-1}X[k]e^{j2{\pi}kn/N},    0{\leqslant}n{\leqslant}N-1</script><p><strong>因此k=1和k=N/2+1（频率为0和fs/2）时，$k\omega_0$对应的幅度为$\frac{X[k]}{N}$；</strong></p><p><strong>k取1~N/2+1中间的其他值时，$k\omega_0$对应的幅度为$\frac{2*X[k]}{N}$。</strong></p><h1 id="MATLAB运行结果"><a href="#MATLAB运行结果" class="headerlink" title="MATLAB运行结果"></a>MATLAB运行结果</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;close all;</span><br><span class="line">fs=<span class="number">1000</span>; N=<span class="number">500</span>;</span><br><span class="line">t=(<span class="number">0</span>:N<span class="number">-1</span>)/fs;   <span class="comment">%生成时间序列</span></span><br><span class="line"></span><br><span class="line">x=<span class="number">1</span>+<span class="number">1.5</span>*<span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*<span class="number">215</span>*t)+<span class="number">2</span>*<span class="built_in">cos</span>(<span class="number">2</span>*<span class="built_in">pi</span>*<span class="number">500</span>*t)+<span class="built_in">cos</span>(<span class="number">2</span>*<span class="built_in">pi</span>*<span class="number">637</span>*t);</span><br><span class="line">y=<span class="built_in">abs</span>(fft(x));</span><br><span class="line"></span><br><span class="line">m=y(<span class="number">1</span>:<span class="built_in">floor</span>(N/<span class="number">2</span>)+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%获得各个频率分量对应的实际幅度：</span></span><br><span class="line"><span class="comment">%直流分量和频率为采样率一半的分量（对应第1项和第N/2+1项）的实际幅度为fft得到的y的第一项的幅值除以长度N；%其他频率为除以N/2</span></span><br><span class="line">m=m/N;m(<span class="number">2</span>:<span class="keyword">end</span><span class="number">-1</span>)=m(<span class="number">2</span>:<span class="keyword">end</span><span class="number">-1</span>)*<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">%获得实际的频率值，长度为N的点中第k个点对应的频率为(k-1)*r/N，频谱分辨率为r/N；</span></span><br><span class="line"><span class="comment">%实际上根据Nyquist采样定理，只有1~N/2+1（N为2的整数次方）之间的点代表的频率是有效的。</span></span><br><span class="line">f=(<span class="number">0</span>:N<span class="number">-1</span>)*fs/N;</span><br><span class="line">f_half=(<span class="number">0</span>:<span class="built_in">floor</span>(N/<span class="number">2</span>))*fs/N;</span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">plot</span>(f_half,m)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/09/21/oeL3H6bA2lXM9cE.png" alt="image-20200921153447894"></p><p>该结果存在两个问题：</p><ol><li>各分量频率与幅度与原始信号x并不完全相等</li><li>多出了一个363Hz的分量，少了637Hz的分量</li></ol><p>问题1是因为此处设置采样率为1000Hz，而采样点数为500，由上面对如何还原实际频率的分析中可知这里的频谱分辨率为fs/N=2Hz，这导致不能准确取到原始信号分量的频率。我们将采样点数设置为1000，频谱分辨率变为1Hz，就可以发现幅度准确了，如下图所示：</p><p><img src="https://i.loli.net/2020/09/21/q5Qrp6bhSieMyfw.png" alt="image-20200921153531244"></p><p>问题二是因为原始信号中637Hz的频率分量超出了Nyquist采样定理所规定的fs/2的最高频率，我们将0~fs整个频段的频谱画出来会发现是关于fs/2对称的，这里的363Hz实际是637Hz：</p><p><img src="https://i.loli.net/2020/09/21/JQZqLi4CvaxNnUO.png" alt="image-20200921153616493"></p><p>因此在设置采样率fs时，需要设置为待分析频段最大频率的两倍以上，否则比如在本例中将会无法区分363Hz和637Hz。</p><p>一种区分思路是改变采样率，比如采样率改变为1200Hz，如果实际信号确实含有363Hz分量，那么这条线仍是363Hz；如果是实际频率是637Hz，那么由于fs/2成了600Hz，这条线将变为600-37=563Hz，产生了移动，从而可以区分开来。</p><h1 id="快速傅里叶变换"><a href="#快速傅里叶变换" class="headerlink" title="快速傅里叶变换"></a>快速傅里叶变换</h1><p>本文开头提到，FFT只是实现DFT的一种快速算法，在频域分析这个领域，我们不考虑计算过程只考虑结果，这种情况下不必深究FFT与DFT到底有什么不同。</p><p>但在算法领域，FFT被广泛应用于计算多项式相乘的结果。考虑下面两个N次多项式相乘得到的2N次多项式的系数</p><script type="math/tex; mode=display">p_1=a_0+a_1x+a_2x^2+...+a_Nx^N</script><script type="math/tex; mode=display">p_2=b_0+b_1x+b_2x^2+...+b_Nx^N</script><p>朴素的计算方法是采用矩阵相乘计算，其时间复杂度为$O(n^2)$，而FFT能够将其降到$O(nlog(n))$，当n很大时（实际工程应用中的n往往很大）FFT能够极大降低运算时间，也因此FFT算法被称为20世纪最伟大的工程算法之一。</p><p>其具体原理与本专业相关度不大，要解释清楚也需要大量笔墨，就不再在此展开，有兴趣深入了解可参考文末文章推荐。</p><h1 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h1><p><a href="https://zhuanlan.zhihu.com/p/31584464">一小时学会快速傅里叶变换（Fast Fourier Transform）</a></p><p><a href="https://zhuanlan.zhihu.com/p/40505277">FFT(快速傅里叶变换)0基础详解！附NTT（ACM/OI）</a></p>]]></content>
      
      
      <categories>
          
          <category> 信号处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 傅里叶变换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/09/13/hello-world/"/>
      <url>2020/09/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
